Revised May 2023

Installation notes for conda on Apple Silicon Computers

%%%%%%%%%%%%%%%%%%%% UPDATED INSTRUCTIONS %%%%%%%%%%%%%%%%%%%%

To ensure that we get the native Apple Silicon version of packages, we want
to install our python distribution via Homebrew and the miniforge package as:

  % brew install miniforge
  
This Homebrew package is a community-driven version of the Anaconda miniconda 
distribution, which is itself based on the conda-forge community version of
Anaconda. Once installed, minforge will operate just like any other Anaconda
distribution.

After miniforge is installed, you will need to initialize conda via:

  % conda init

If you are using zsh, the command is:

  % conda init zsh

This command adds the necessary lines to your shell's .rc file to use the
miniforge distribution properly. 

Packages can be installed via pip as normal, including:

  numpy, scipy, astropy, matplotlib, jupyter, jupyterlab, pandas, scikit-learn
  GPy, adstex, dust-extinction, extinction, seaborn
  
We also want to install several useful packages and utilities from outside the 
pip and conda package managers, many of which we can download from github. 
They can be found at the following links, and installed via their included
installation instructions.

  misfits - https:github.com/sholmbo/misfits
  python_stuff - Eddie's private python repo
  spextractor - https://github.com/anthonyburrow/spextractor
  SNIaDCA - https://github.com/anthonyburrow/SNIaDCA
  snpy - https://csp.obs.carnegiescience.edu/data/snpy/installing_snoopy2
  
Several of these packages, including misfits and snpy, have dependencies on
specific versions of python packages which may conflict with each other or
different from the latest release. To avoid the issues, they can be installed
in their own conda environments. A new conda environment can be created via:

  % conda create --no-default-packages -n ENV python

To allow newly created environments to be selected for new Jupyter notebooks,
we must install a few additional packages to our environments. In our base
environment, install nb_conda_kernels via:

  % conda install nb_conda_kernels
  
Then, in each environment you want to appear in the Jupyter drop-down menu,
install ipykernel via:

  % conda activate ENV
  % pip install ipykernel
  
Note: This method will only work if you install the ipykernel in each new conda
environment you create. If you cannot install ipykernel becuase of a conflict or
do not wish to install it in an environment, kernels must be registered via:

  % ipython kernel install --user --name=new-env
  
Kernels can be unregistered via:

  % jupyter kernelspec uninstall new-env 

(The above instructions were derived from: https://towardsdatascience.com/get-your-conda-environment-to-show-in-jupyter-notebooks-the-easy-way-17010b76e874)

%%%%%%%%%%%%%%%%%%%% SNPY Installation Instructions %%%%%%%%%%%%%%%%%%%%
  
In order to properly install snpy on an Apple Silicon machine, we must first 
install a prerequisite and fix one small bug. After downloading snpy from its
git repo; navigate to the snpy/snpy/spline2/ directory, and install the spline2
package via:

  % pip install .
  
After the spline2 package has successfully installed, return to the git root,
and navigate to the snpy/snpy/dm15temp/ directory and open the dm15temp_CRB.c
file. In the block of preprocessor directives (e.g. the "# include" lines) at
the top of the file, add the following line:

  # include <string.h>
  
After saving and exiting the file, you can return to the git root and install
snpy via:

  % pip install .

%%%%%%%%%%%%%%%%%%%% LEGACY INSTRUCTIONS (FOR REFERENCE) %%%%%%%%%%%%%%%%%%%%

More information about Anaconda and its python distribution can be found here:
https://www.anaconda.com/

To install Anaconda on M1 MacBook Pro, follow conda guide at:
https://docs.conda.io/projects/conda/en/latest/user-guide/install/macos.html

Once installed, further packages can be installed via pip. These packages 
include:

  adstex, astrodash, dust-extinction, extinction, seaborn
  
Several other packages will need to me installed locally as they are not
registered on PyPi. They include:

  python_stuff - Eddie's private python repo
  spextractor - https://github.com/anthonyburrow/spextractor
  SNIaDCA - https://github.com/anthonyburrow/SNIaDCA
  snpy - https://csp.obs.carnegiescience.edu/data/snpy/installing_snoopy2
  
For Eddie's python_stuff/ simply clone the git repo to ~/my_python/ and add
python_stuff to your PATH.

For Anthony's packages (spextractor, SNIaDCA), simply clone the git repos to
~/my_python/ and install the packages via

   pip install .
   
For snpy, we install via the install script method, which will create snpy in 
its own environment (installation attempt via pip method failed). Once the 
install script is downloaded, it is installed via:

  % bash install-snpy snpy

which will create a conda environment named snpy where it is installed.

It is necessary to create several new conda environments to install several
other specific packages, including MISFITS and the JWST reduction pipeline

To create a new environment named ENV with conda execute:

  % conda create --no-default-packages -n ENV python
  
To allow newly created environments to be selected for new Jupyter notebooks,
we must install a few additional packages to our environments. In our base
environment, install nb_conda_kernels via:

  % conda install nb_conda_kernels
  
Then, in each environment you want to appear in the Jupyter drop-down menu,
install ipykernel via:

  % conda activate ENV
  % conda install ipykernel
  
Note: This method will only work if you install the ipykernel in each new conda
environment you create. If you cannot install ipykernel becuase of a conflict or
do not wish to install it in an environment, kernels must be registered via:

  % ipython kernel install --user --name=new-env
  
Kernels can be unregistered via:

  % jupyter kernelspec uninstall new-env 

(The above instructions were derived from: https://towardsdatascience.com/get-your-conda-environment-to-show-in-jupyter-notebooks-the-easy-way-17010b76e874)
